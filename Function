#coding: utf-8
 
#可变参数, *被当做一个tuple
def add(*nums):
	sum = 0
	print(type(nums))
	for x in nums:
		sum += x
	print(sum)

#关键字可变参数，形参前用**符号，表示可以接受多个关键字参数，
#收集的实参名称和值组成一个字典
def showconfig(username, *args, **kwargs):
	print(args)
	for k,v in kwargs.items():
		print('{}={}'.format(k,v))

#showconfig(host='11', port='cc', username='pop', password='magedu')
#showconfig('pop', 1, 2,3, port = 'aaa', password='123')


#参数解构
def add(x, y):
	print(x+y)

t = (4,5)
add(*range(1,3))
d = {'x':1, 'y':1}
add(**d)

#闭包closure，装饰器中用处较大，出现在嵌套函数中，指的是内层函数引用到了外层函数的自由变量，就形成了闭包，JS中较为常见
def counter():
	c = [0]
	def inc():
		c[0] += 1
		return c[0]
	return inc

#foo是一个可调用对象（函数对象）
foo = counter()
print(foo)
print(foo(), foo())
c = 100
print(foo())

#python3的闭包方式，nolocal,将变量标记为上级的局部作用于定义
def counter():
	count = 0
	def inc():
		nonlocal count
		count += 1
		return count
	return inc
foo = counter()
print(foo())